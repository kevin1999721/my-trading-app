/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n\tquery fetchBackTest($backtestArgs: BacktestArgs!) {\n\t\tbacktest(backtestArgs: $backtestArgs) {\n                  id\n                  information {\n                        startDatetime\n                        endDatetime\n                        dateRange {\n                              startDate\n                              endDate\n                        }\n                        tradeStrategyId\n                        stockSelectionStrategyId\n                        stockCode\n                  }\n                  results {\n                        id\n                        code\n                        name\n                        tradeType\n                        entryPoint\n                        leavePoint\n                        roi\n                        profit\n                        cost\n                  }\n\t\t}\n\t}\n": types.FetchBackTestDocument,
    "\n\tquery fetchKbars($kbarsArgs: KbarsArgs!) {\n\t\tkbars(kbarsArgs: $kbarsArgs) {\n\t\t\ttimestamp\n\t\t\topen\n\t\t\thigh\n\t\t\tlow\n\t\t\tclose\n\t\t\tvolume\n\t\t\tamount\n\t\t}\n\t}\n": types.FetchKbarsDocument,
    "\n\tquery fetchStocks {\n\t\tstocks {\n                  category\n                  code\n                  dayTrade\n                  exchange\n                  limitDown\n                  limitUp\n                  name\n                  reference                 \n                  updateDate\n\t\t}\n\t}\n": types.FetchStocksDocument,
    "\n\tquery fetchStock($code: String!) {\n\t\tstock(code : $code) {\n                  category\n                  code\n                  dayTrade\n                  exchange\n                  limitDown\n                  limitUp\n                  name\n                  reference\n                  updateDate\n\t\t}\n\t}\n": types.FetchStockDocument,
    "\n\tquery fetchStockRealtime($code: String!) {\n            stockRealtime(code : $code) {\n                  info {\n                    category\n                    code\n                    dayTrade\n                    exchange\n                    limitDown\n                    limitUp\n                    name\n                    reference                    \n                    updateDate\n                  }\n                  kbars {\n                        timestamp\n                        open\n                        high\n                        low\n                        close\n                        volume\n                        amount\n                  }\n                  askPrice\n                  askVolume\n                  bidPrice\n                  bidVolume\n                  changePrice\n                  changeRate\n                  close\n                  high\n                  low\n                  open\n                  volume\n                  yesterdayVolume\n            }\n\t}\n": types.FetchStockRealtimeDocument,
    "\n\tquery fetchStocksRealtime($codes: [String!]!) {\n            stocksRealtime(codes : $codes) {\n                  info {\n                    category\n                    code\n                    dayTrade\n                    exchange\n                    limitDown\n                    limitUp\n                    name\n                    reference                    \n                    updateDate\n                  }\n                  kbars {\n                        timestamp\n                        open\n                        high\n                        low\n                        close\n                        volume\n                        amount\n                  }\n                  askPrice\n                  askVolume\n                  bidPrice\n                  bidVolume\n                  changePrice\n                  changeRate\n                  close\n                  high\n                  low\n                  open\n                  volume\n                  yesterdayVolume\n            }\n\t}\n": types.FetchStocksRealtimeDocument,
    "\n      query fetchMajorTrends($code: String!, $startDate: Date!, $endDate: Date!) {\n            majorsTrends(code: $code, startDate: $startDate, endDate: $endDate) {\n                  startDate\n                  endDate\n                  majorsBuyRank {\n                        buy\n                        diff\n                        percentOfVolume\n                        securitiesFirm\n                        sell\n                  }\n                  majorsSellRank {\n                        buy\n                        diff\n                        percentOfVolume\n                        securitiesFirm\n                        sell\n                  }\n            }\n      }\n": types.FetchMajorTrendsDocument,
    "\n      query fetchMajorTrend($majorsTrendArgs: MajorsTrendArgs!) {\n            majorsTrend(majorsTrendArgs: $majorsTrendArgs) {\n                  startDate\n                  endDate\n                  majorsBuyRank {\n                        buy\n                        diff\n                        percentOfVolume\n                        securitiesFirm\n                        sell\n                  }\n                  majorsSellRank {\n                        buy\n                        diff\n                        percentOfVolume\n                        securitiesFirm\n                        sell\n                  }\n            }\n      }\n": types.FetchMajorTrendDocument,
    "\n      query fetchShareholders($code: String!) {\n            shareholders(code: $code) {\n                  date\n                  moreThanFourHundred\n                  moreThanFourHundredPercent\n                  moreThanOenThousand\n                  moreThanOneThousandPercent\n                  totalShareholders\n                  close\n            }\n      }\n": types.FetchShareholdersDocument,
    "\n      query fetchNewsList($code: String!) {\n            newsList(code: $code) {\n                  aticle\n                  author\n                  datetime\n                  description\n                  title\n            }\n      }\n": types.FetchNewsListDocument,
    "\n      query fetchWorldIndexes {\n            worldIndexes {\n                  code\n                  name\n                  link\n                  price\n                  change\n                  changePercent\n                  updateDatetime\n            }\n      }\n": types.FetchWorldIndexesDocument,
    "\n      query fetchMarketRealtime {\n            marketRealtime {\n                  info {\n                        category\n                        code\n                        dayTrade\n                        exchange\n                        limitDown\n                        limitUp\n                        name\n                        reference\n                        updateDate\n                  }\n                  open\n                  high\n                  low\n                  close\n                  volume\n                  yesterdayVolume\n                  changePrice\n                  changeRate\n                  askPrice\n                  askVolume\n                  bidPrice\n                  bidVolume\n                  kbars {\n                        timestamp\n                        open\n                        high\n                        low\n                        close\n                        volume\n                        amount\n                  }\n            }\n      }\n": types.FetchMarketRealtimeDocument,
    "\n      query fetchStocksRank($stocksRankArgs: StocksRankArgs!){\n            stocksRank(stocksRankArgs: $stocksRankArgs){\n                  date\n                  code\n                  name\n                  ts\n                  open\n                  high\n                  low\n                  close\n                  changePrice\n                  changeType\n                  averagePrice\n                  volume\n                  totalVolume\n                  yesterdayVolume\n                  volumeRatio\n            }\n      }\n": types.FetchStocksRankDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tquery fetchBackTest($backtestArgs: BacktestArgs!) {\n\t\tbacktest(backtestArgs: $backtestArgs) {\n                  id\n                  information {\n                        startDatetime\n                        endDatetime\n                        dateRange {\n                              startDate\n                              endDate\n                        }\n                        tradeStrategyId\n                        stockSelectionStrategyId\n                        stockCode\n                  }\n                  results {\n                        id\n                        code\n                        name\n                        tradeType\n                        entryPoint\n                        leavePoint\n                        roi\n                        profit\n                        cost\n                  }\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery fetchBackTest($backtestArgs: BacktestArgs!) {\n\t\tbacktest(backtestArgs: $backtestArgs) {\n                  id\n                  information {\n                        startDatetime\n                        endDatetime\n                        dateRange {\n                              startDate\n                              endDate\n                        }\n                        tradeStrategyId\n                        stockSelectionStrategyId\n                        stockCode\n                  }\n                  results {\n                        id\n                        code\n                        name\n                        tradeType\n                        entryPoint\n                        leavePoint\n                        roi\n                        profit\n                        cost\n                  }\n\t\t}\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tquery fetchKbars($kbarsArgs: KbarsArgs!) {\n\t\tkbars(kbarsArgs: $kbarsArgs) {\n\t\t\ttimestamp\n\t\t\topen\n\t\t\thigh\n\t\t\tlow\n\t\t\tclose\n\t\t\tvolume\n\t\t\tamount\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery fetchKbars($kbarsArgs: KbarsArgs!) {\n\t\tkbars(kbarsArgs: $kbarsArgs) {\n\t\t\ttimestamp\n\t\t\topen\n\t\t\thigh\n\t\t\tlow\n\t\t\tclose\n\t\t\tvolume\n\t\t\tamount\n\t\t}\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tquery fetchStocks {\n\t\tstocks {\n                  category\n                  code\n                  dayTrade\n                  exchange\n                  limitDown\n                  limitUp\n                  name\n                  reference                 \n                  updateDate\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery fetchStocks {\n\t\tstocks {\n                  category\n                  code\n                  dayTrade\n                  exchange\n                  limitDown\n                  limitUp\n                  name\n                  reference                 \n                  updateDate\n\t\t}\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tquery fetchStock($code: String!) {\n\t\tstock(code : $code) {\n                  category\n                  code\n                  dayTrade\n                  exchange\n                  limitDown\n                  limitUp\n                  name\n                  reference\n                  updateDate\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery fetchStock($code: String!) {\n\t\tstock(code : $code) {\n                  category\n                  code\n                  dayTrade\n                  exchange\n                  limitDown\n                  limitUp\n                  name\n                  reference\n                  updateDate\n\t\t}\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tquery fetchStockRealtime($code: String!) {\n            stockRealtime(code : $code) {\n                  info {\n                    category\n                    code\n                    dayTrade\n                    exchange\n                    limitDown\n                    limitUp\n                    name\n                    reference                    \n                    updateDate\n                  }\n                  kbars {\n                        timestamp\n                        open\n                        high\n                        low\n                        close\n                        volume\n                        amount\n                  }\n                  askPrice\n                  askVolume\n                  bidPrice\n                  bidVolume\n                  changePrice\n                  changeRate\n                  close\n                  high\n                  low\n                  open\n                  volume\n                  yesterdayVolume\n            }\n\t}\n"): (typeof documents)["\n\tquery fetchStockRealtime($code: String!) {\n            stockRealtime(code : $code) {\n                  info {\n                    category\n                    code\n                    dayTrade\n                    exchange\n                    limitDown\n                    limitUp\n                    name\n                    reference                    \n                    updateDate\n                  }\n                  kbars {\n                        timestamp\n                        open\n                        high\n                        low\n                        close\n                        volume\n                        amount\n                  }\n                  askPrice\n                  askVolume\n                  bidPrice\n                  bidVolume\n                  changePrice\n                  changeRate\n                  close\n                  high\n                  low\n                  open\n                  volume\n                  yesterdayVolume\n            }\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tquery fetchStocksRealtime($codes: [String!]!) {\n            stocksRealtime(codes : $codes) {\n                  info {\n                    category\n                    code\n                    dayTrade\n                    exchange\n                    limitDown\n                    limitUp\n                    name\n                    reference                    \n                    updateDate\n                  }\n                  kbars {\n                        timestamp\n                        open\n                        high\n                        low\n                        close\n                        volume\n                        amount\n                  }\n                  askPrice\n                  askVolume\n                  bidPrice\n                  bidVolume\n                  changePrice\n                  changeRate\n                  close\n                  high\n                  low\n                  open\n                  volume\n                  yesterdayVolume\n            }\n\t}\n"): (typeof documents)["\n\tquery fetchStocksRealtime($codes: [String!]!) {\n            stocksRealtime(codes : $codes) {\n                  info {\n                    category\n                    code\n                    dayTrade\n                    exchange\n                    limitDown\n                    limitUp\n                    name\n                    reference                    \n                    updateDate\n                  }\n                  kbars {\n                        timestamp\n                        open\n                        high\n                        low\n                        close\n                        volume\n                        amount\n                  }\n                  askPrice\n                  askVolume\n                  bidPrice\n                  bidVolume\n                  changePrice\n                  changeRate\n                  close\n                  high\n                  low\n                  open\n                  volume\n                  yesterdayVolume\n            }\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query fetchMajorTrends($code: String!, $startDate: Date!, $endDate: Date!) {\n            majorsTrends(code: $code, startDate: $startDate, endDate: $endDate) {\n                  startDate\n                  endDate\n                  majorsBuyRank {\n                        buy\n                        diff\n                        percentOfVolume\n                        securitiesFirm\n                        sell\n                  }\n                  majorsSellRank {\n                        buy\n                        diff\n                        percentOfVolume\n                        securitiesFirm\n                        sell\n                  }\n            }\n      }\n"): (typeof documents)["\n      query fetchMajorTrends($code: String!, $startDate: Date!, $endDate: Date!) {\n            majorsTrends(code: $code, startDate: $startDate, endDate: $endDate) {\n                  startDate\n                  endDate\n                  majorsBuyRank {\n                        buy\n                        diff\n                        percentOfVolume\n                        securitiesFirm\n                        sell\n                  }\n                  majorsSellRank {\n                        buy\n                        diff\n                        percentOfVolume\n                        securitiesFirm\n                        sell\n                  }\n            }\n      }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query fetchMajorTrend($majorsTrendArgs: MajorsTrendArgs!) {\n            majorsTrend(majorsTrendArgs: $majorsTrendArgs) {\n                  startDate\n                  endDate\n                  majorsBuyRank {\n                        buy\n                        diff\n                        percentOfVolume\n                        securitiesFirm\n                        sell\n                  }\n                  majorsSellRank {\n                        buy\n                        diff\n                        percentOfVolume\n                        securitiesFirm\n                        sell\n                  }\n            }\n      }\n"): (typeof documents)["\n      query fetchMajorTrend($majorsTrendArgs: MajorsTrendArgs!) {\n            majorsTrend(majorsTrendArgs: $majorsTrendArgs) {\n                  startDate\n                  endDate\n                  majorsBuyRank {\n                        buy\n                        diff\n                        percentOfVolume\n                        securitiesFirm\n                        sell\n                  }\n                  majorsSellRank {\n                        buy\n                        diff\n                        percentOfVolume\n                        securitiesFirm\n                        sell\n                  }\n            }\n      }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query fetchShareholders($code: String!) {\n            shareholders(code: $code) {\n                  date\n                  moreThanFourHundred\n                  moreThanFourHundredPercent\n                  moreThanOenThousand\n                  moreThanOneThousandPercent\n                  totalShareholders\n                  close\n            }\n      }\n"): (typeof documents)["\n      query fetchShareholders($code: String!) {\n            shareholders(code: $code) {\n                  date\n                  moreThanFourHundred\n                  moreThanFourHundredPercent\n                  moreThanOenThousand\n                  moreThanOneThousandPercent\n                  totalShareholders\n                  close\n            }\n      }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query fetchNewsList($code: String!) {\n            newsList(code: $code) {\n                  aticle\n                  author\n                  datetime\n                  description\n                  title\n            }\n      }\n"): (typeof documents)["\n      query fetchNewsList($code: String!) {\n            newsList(code: $code) {\n                  aticle\n                  author\n                  datetime\n                  description\n                  title\n            }\n      }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query fetchWorldIndexes {\n            worldIndexes {\n                  code\n                  name\n                  link\n                  price\n                  change\n                  changePercent\n                  updateDatetime\n            }\n      }\n"): (typeof documents)["\n      query fetchWorldIndexes {\n            worldIndexes {\n                  code\n                  name\n                  link\n                  price\n                  change\n                  changePercent\n                  updateDatetime\n            }\n      }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query fetchMarketRealtime {\n            marketRealtime {\n                  info {\n                        category\n                        code\n                        dayTrade\n                        exchange\n                        limitDown\n                        limitUp\n                        name\n                        reference\n                        updateDate\n                  }\n                  open\n                  high\n                  low\n                  close\n                  volume\n                  yesterdayVolume\n                  changePrice\n                  changeRate\n                  askPrice\n                  askVolume\n                  bidPrice\n                  bidVolume\n                  kbars {\n                        timestamp\n                        open\n                        high\n                        low\n                        close\n                        volume\n                        amount\n                  }\n            }\n      }\n"): (typeof documents)["\n      query fetchMarketRealtime {\n            marketRealtime {\n                  info {\n                        category\n                        code\n                        dayTrade\n                        exchange\n                        limitDown\n                        limitUp\n                        name\n                        reference\n                        updateDate\n                  }\n                  open\n                  high\n                  low\n                  close\n                  volume\n                  yesterdayVolume\n                  changePrice\n                  changeRate\n                  askPrice\n                  askVolume\n                  bidPrice\n                  bidVolume\n                  kbars {\n                        timestamp\n                        open\n                        high\n                        low\n                        close\n                        volume\n                        amount\n                  }\n            }\n      }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n      query fetchStocksRank($stocksRankArgs: StocksRankArgs!){\n            stocksRank(stocksRankArgs: $stocksRankArgs){\n                  date\n                  code\n                  name\n                  ts\n                  open\n                  high\n                  low\n                  close\n                  changePrice\n                  changeType\n                  averagePrice\n                  volume\n                  totalVolume\n                  yesterdayVolume\n                  volumeRatio\n            }\n      }\n"): (typeof documents)["\n      query fetchStocksRank($stocksRankArgs: StocksRankArgs!){\n            stocksRank(stocksRankArgs: $stocksRankArgs){\n                  date\n                  code\n                  name\n                  ts\n                  open\n                  high\n                  low\n                  close\n                  changePrice\n                  changeType\n                  averagePrice\n                  volume\n                  totalVolume\n                  yesterdayVolume\n                  volumeRatio\n            }\n      }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;